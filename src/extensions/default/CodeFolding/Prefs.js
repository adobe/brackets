/**
 * Wrapper around brackets pref system to ensure preferences are stored in in one single object instead of using multiple keys. 
 * This is to make it easy for the user who edits their preferences file to easily manage the potentially numerous lines of preferences generated by the persisting code-folding state.
 * @author Patrick Oladimeji
 * @date 3/22/14 20:39:53 PM
 */
/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */
/*global define, brackets*/
define(function (require, exports, module) {
    "use strict";
    var PreferencesManager      = brackets.getModule("preferences/PreferencesManager"),
        _prefs                  = PreferencesManager.getExtensionPrefs("code-folding"),
        stateManager            = PreferencesManager.stateManager.getPrefixedSystem("code-folding"),
		DefaultSettings			= require("DefaultSettings"),
        store = {},
		settings = {},
        folds = "folds";
    
    function simplify(folds) {
        if (!folds) { return folds; }
        var res = {}, range;
        Object.keys(folds).map(function (line) {
            range = folds[line];
            res[line] = Array.isArray(range) ? range : [[range.from.line, range.from.ch], [range.to.line, range.to.ch]];
        });
        return res;
    }
    
    function inflate(folds) {
        if (!folds) { return folds; }
         //transform the folds into objects with from and to properties
        var ranges = {}, obj;
        Object.keys(folds).forEach(function (line) {
            obj = folds[line];
            ranges[line] = {from: {line: obj[0][0], ch: obj[0][1]}, to: {line: obj[1][0], ch: obj[1][1]}};
        });
        
        return ranges;
    }
    
    module.exports = {
        get: function (id) {
            store = (stateManager.get(folds) || {});
            return inflate(store[id]);
        },
        set: function (id, value) {
            store[id] = simplify(value);
            stateManager.set(folds, store);
            stateManager.save();
        },
		getSetting: function (key) {
			settings = (stateManager.get("settings") || DefaultSettings);
			return settings[key];
		},
		setSetting: function (key, value) {
			settings[key] = value;
			stateManager.set("settings", settings);
			stateManager.save();
		},
		getAllSettings: function () {
			var res = {}, self = this;
			Object.keys(DefaultSettings).forEach(function (key) {
				res[key] = self.getSetting(key);
			});
			return res;
		},
        clearAllFolds: function () {
            stateManager.set(folds, {});
            stateManager.save();
        }
    };

});
