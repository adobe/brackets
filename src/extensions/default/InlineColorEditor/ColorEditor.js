// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['helper/colors'], function(colors) {
    var ColorEditor;
    return ColorEditor = (function() {

      ColorEditor.prototype.hexRegEx = /[a-f0-9]{6}|#[a-f0-9]{3}/i;

      ColorEditor.prototype.rgbRegEx = /rgb\( ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?\)|rgba\( ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b(1|0|0\.[0-9]{1,3}) ?\)/i;

      ColorEditor.prototype.hslRegEx = /hsl\( ?\b([0-9]{1,2}|[12][0-9]{2}|3[0-5][0-9]|360)\b ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b([0-9]{1,2}|100)\b% ?\)|hsla\( ?\b([0-9]{1,2}|[12][0-9]{2}|3[0-5][0-9]|360)\b ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b(1|0|0\.[0-9]{1,3}) ?\)/;

      ColorEditor.prototype.hexTypeIndex = 0;

      ColorEditor.prototype.rgbTypeIndex = 1;

      ColorEditor.prototype.hslTypeIndex = 2;

      function ColorEditor(element, color, callback) {
        var _this = this;
        this.element = element;
        this.callback = callback != null ? callback : null;
        this.buttonbarButtonClickHandler = __bind(this.buttonbarButtonClickHandler, this);

        this.opacityMouseupHandler = __bind(this.opacityMouseupHandler, this);

        this.opacityMousemoveHandler = __bind(this.opacityMousemoveHandler, this);

        this.opacityMousedownHandler = __bind(this.opacityMousedownHandler, this);

        this.hueMouseupHandler = __bind(this.hueMouseupHandler, this);

        this.hueMousemoveHandler = __bind(this.hueMousemoveHandler, this);

        this.hueMousedownHandler = __bind(this.hueMousedownHandler, this);

        this.satLumMouseupHandler = __bind(this.satLumMouseupHandler, this);

        this.satLumMousemoveHandler = __bind(this.satLumMousemoveHandler, this);

        this.satLumMousedownHandler = __bind(this.satLumMousedownHandler, this);

        this.setOutputType(this.hexTypeIndex);
        this.satLumBlock = $(this.element).children('.saturation-luminosity-block')[0];
        this.hueSlider = $(this.element).children('.hue-slider')[0];
        this.opacitySlider = $(this.element).children('.opacity-slider')[0];
        this.colorIndicator = $(this.element).children('.lower-controls').children('.color-indicator')[0];
        this.originalColorIndicator = $(this.colorIndicator).children('.original-color')[0];
        this.buttonBar = $(this.element).children('.lower-controls').children('.button-bar')[0];
        this.originalColor = color;
        $(this.satLumBlock).mousedown(this.satLumMousedownHandler);
        $(this.hueSlider).mousedown(this.hueMousedownHandler);
        $(this.opacitySlider).mousedown(this.opacityMousedownHandler);
        $(this.buttonBar).children('li').click(this.buttonbarButtonClickHandler);
        $(this.originalColorIndicator).css({
          background: this.originalColor
        });
        $(this.originalColorIndicator).click(function() {
          return _this.parseColor(_this.originalColor);
        });
        this.parseColor(color);
      }

      ColorEditor.prototype.parseColor = function(color) {
        var adjustedColorAr, colorAr, colorItem;
        if (color.match(this.hexRegEx)) {
          this.setOutputType(this.hexTypeIndex);
          if (color.match(/^#?[a-f0-9]{3}$/i)) {
            color = color.replace('#', '');
            colorAr = color.split('');
            color = colorAr[0] + colorAr[0] + colorAr[1] + colorAr[1] + colorAr[2] + colorAr[2];
          }
          this.color = Colors.ColorFromHex(color);
        } else if (color.match(this.hslRegEx)) {
          this.setOutputType(this.hslTypeIndex);
          color = color.substring(color.indexOf('(') + 1, color.indexOf(')'));
          color = color.replace(/( )/g, '');
          colorAr = color.split(',');
          adjustedColorAr = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = colorAr.length; _i < _len; _i++) {
              colorItem = colorAr[_i];
              _results.push(this.parsePercentage(colorItem));
            }
            return _results;
          }).call(this);
          this.color = Colors.ColorFromHSV(adjustedColorAr[0], adjustedColorAr[1], adjustedColorAr[2]);
          if (adjustedColorAr.length > 3) {
            this.color.SetAlpha(adjustedColorAr[3]);
          }
        } else if (color.match(this.rgbRegEx)) {
          this.setOutputType(this.rgbTypeIndex);
          color = color.substring(color.indexOf('(') + 1, color.indexOf(')'));
          color = color.replace(/( )/g, '');
          colorAr = color.split(',');
          adjustedColorAr = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = colorAr.length; _i < _len; _i++) {
              colorItem = colorAr[_i];
              _results.push(this.parsePercentage(colorItem));
            }
            return _results;
          }).call(this);
          this.color = Colors.ColorFromRGB(adjustedColorAr[0], adjustedColorAr[1], adjustedColorAr[2]);
          if (adjustedColorAr.length > 3) {
            this.color.SetAlpha(adjustedColorAr[3]);
          }
        } else {
          this.setOutputType(this.hexTypeIndex);
          this.color = Colors.ColorFromHex('#FFFFFF');
          this.originalColor = '#FFFFFF';
          console.log(this.originalColor);
          $(this.originalColorIndicator).css({
            background: '#FFFFFF'
          });
        }
        return this.updateColor();
      };

      ColorEditor.prototype.parsePercentage = function(valueString) {
        output;

        var output;
        if (valueString.indexOf('%') !== -1) {
          valueString = valueString.replace('%', '');
          output = parseFloat(valueString) / 100;
        } else {
          output = parseFloat(valueString);
        }
        return output;
      };

      ColorEditor.prototype.updateColor = function() {
        var colorLabel, transparent;
        if (this.outputStringType === this.hexTypeIndex) {
          this.color.SetAlpha(1);
        }
        $(this.satLumBlock).css('background', 'hsl(' + this.color.Hue() + ', 100%, 50%)');
        transparent = 'rgba(' + this.color.Red() + ',' + this.color.Green() + ',' + this.color.Blue() + ',0)';
        $(this.opacitySlider).children('.opacity-gradient').css({
          background: "-webkit-linear-gradient(top, " + this.color.HexString() + ", " + transparent + ")"
        });
        $(this.satLumBlock).children('.selector').css({
          left: String(this.color.Saturation() * 100) + '%',
          bottom: String(this.color.Value() * 100) + '%'
        });
        $(this.hueSlider).children('.selector').css({
          bottom: String((this.color.Hue() / 360) * 100) + '%'
        });
        $(this.opacitySlider).children('.selector').css({
          bottom: String(this.color.Alpha() * 100) + '%'
        });
        $(this.colorIndicator).children('.selected-color').css({
          background: 'rgba(' + this.color.Red() + ',' + this.color.Green() + ',' + this.color.Blue() + ',' + this.color.Alpha() + ')'
        });
        switch (this.outputStringType) {
          case this.hexTypeIndex:
            colorLabel = this.color.HexString();
            break;
          case this.rgbTypeIndex:
            colorLabel = "" + (this.color.Red()) + "," + (this.color.Green()) + "," + (this.color.Blue());
            if (this.color.Alpha() < 1 && this.color.Alpha() >= 0) {
              colorLabel = "rgba(" + colorLabel + "," + (Math.round(this.color.Alpha() * 100) / 100) + ")";
            } else {
              colorLabel = "rgb(" + colorLabel + ")";
            }
            break;
          case this.hslTypeIndex:
            colorLabel = this.color.HSL();
            if (this.color.Alpha() < 1 && this.color.Alpha() >= 0) {
              colorLabel = "hsla(" + colorLabel + "," + (Math.round(this.color.Alpha() * 100) / 100) + ")";
            } else {
              colorLabel = "hsl(" + colorLabel + ")";
            }
        }
        if (this.callback) {
          return this.callback(colorLabel);
        }
      };

      ColorEditor.prototype.setOutputType = function(newOutputType) {
        this.outputStringType = newOutputType;
        $(this.buttonBar).children().removeClass('selected');
        return $($(this.buttonBar).children()[newOutputType]).addClass('selected');
      };

      ColorEditor.prototype.satLumMousedownHandler = function(e) {
        this.color.SetHSV(this.color.Hue(), e.offsetX / 150, 1 - (e.offsetY / 150));
        this.updateColor();
        $(document).bind('mouseup', this.satLumMouseupHandler);
        return $(document).bind('mousemove', this.satLumMousemoveHandler);
      };

      ColorEditor.prototype.satLumMousemoveHandler = function(e) {
        var height, width, x, y;
        x = e.originalEvent.clientX - $(this.satLumBlock).offset().left;
        y = e.originalEvent.clientY - $(this.satLumBlock).offset().top;
        width = $(this.satLumBlock).width();
        height = $(this.satLumBlock).height();
        x = x >= width ? width : x < 0 ? 0 : x;
        y = y >= height ? height : y < 0 ? 0 : y;
        this.color.SetHSV(this.color.Hue(), x / 150, 1 - (y / 150));
        return this.updateColor();
      };

      ColorEditor.prototype.satLumMouseupHandler = function(e) {
        $(document).unbind('mouseup', this.satLumMouseupHandler);
        return $(document).unbind('mousemove', this.satLumMousemoveHandler);
      };

      ColorEditor.prototype.hueMousedownHandler = function(e) {
        this.color.SetHSV((1 - e.offsetY / 150) * 360, this.color.Saturation(), this.color.Value());
        this.updateColor();
        $(document).bind('mouseup', this.hueMouseupHandler);
        return $(document).bind('mousemove', this.hueMousemoveHandler);
      };

      ColorEditor.prototype.hueMousemoveHandler = function(e) {
        var height, y;
        y = e.originalEvent.clientY - $(this.hueSlider).offset().top;
        height = $(this.hueSlider).height();
        y = y >= height ? height : y < 0 ? 0 : y;
        this.color.SetHSV((1 - y / height) * 360, this.color.Saturation(), this.color.Value());
        return this.updateColor();
      };

      ColorEditor.prototype.hueMouseupHandler = function(e) {
        $(document).unbind('mouseup', this.hueMouseupHandler);
        return $(document).unbind('mousemove', this.hueMousemoveHandler);
      };

      ColorEditor.prototype.opacityMousedownHandler = function(e) {
        this.color.SetHSVA(this.color.Hue(), this.color.Saturation(), this.color.Value(), 1 - e.offsetY / 150);
        this.updateColor();
        if (this.outputStringType === this.hexTypeIndex) {
          this.setOutputType(this.rgbTypeIndex);
        }
        $(document).bind('mouseup', this.opacityMouseupHandler);
        return $(document).bind('mousemove', this.opacityMousemoveHandler);
      };

      ColorEditor.prototype.opacityMousemoveHandler = function(e) {
        var height, y;
        y = e.originalEvent.clientY - $(this.opacitySlider).offset().top;
        height = $(this.opacitySlider).height();
        y = y >= height ? height : y < 0 ? 0 : y;
        this.color.SetHSVA(this.color.Hue(), this.color.Saturation(), this.color.Value(), 1 - y / height);
        return this.updateColor();
      };

      ColorEditor.prototype.opacityMouseupHandler = function(e) {
        $(document).unbind('mouseup', this.opacityMouseupHandler);
        return $(document).unbind('mousemove', this.opacityMousemoveHandler);
      };

      ColorEditor.prototype.buttonbarButtonClickHandler = function(e) {
        var selectedIndex, selectedItem;
        selectedItem = $(e.target).parent();
        selectedIndex = $(this.buttonBar).children().index(selectedItem);
        this.setOutputType(selectedIndex);
        return this.updateColor();
      };

      return ColorEditor;

    })();
  });

}).call(this);
