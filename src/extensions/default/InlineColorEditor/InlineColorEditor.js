// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    'use strict';

    var ColorEditor, InlineColorEditor, InlineEditorTemplate, InlineWidget;
    InlineWidget = brackets.getModule("editor/InlineWidget").InlineWidget;
    ColorEditor = require('ColorEditor');
    InlineEditorTemplate = require("text!InlineColorEditorTemplate.html");
    InlineColorEditor = (function(_super) {

      __extends(InlineColorEditor, _super);

      InlineColorEditor.prototype.parentClass = InlineWidget.prototype;

      InlineColorEditor.prototype.$wrapperDiv = null;

      function InlineColorEditor(color, pos) {
        this.color = color;
        this.pos = pos;
        this.setColor = __bind(this.setColor, this);

        this.initialColorString = this.color;
        InlineWidget.call(this);
      }

      InlineColorEditor.prototype.setColor = function(colorLabel) {
        var end;
        if (colorLabel !== this.initialColorString) {
          end = {
            line: this.pos.line,
            ch: this.pos.ch + this.color.length
          };
          this.editor.document.replaceRange(colorLabel, this.pos, end);
          this.editor._codeMirror.setSelection(this.pos, {
            line: this.pos.line,
            ch: this.pos.ch + colorLabel.length
          });
          return this.color = colorLabel;
        }
      };

      InlineColorEditor.prototype.load = function(hostEditor) {
        var selectedColors, self;
        self = this;
        this.editor = hostEditor;
        this.parentClass.load.call(this, hostEditor);
        selectedColors = this.editor._codeMirror.getValue().match(/#[a-f0-9]{6}|#[a-f0-9]{3}|rgb\( ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?\)|rgba\( ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\b ?, ?\b(1|0|0\.[0-9]{1,3}) ?\)|hsl\( ?\b([0-9]{1,2}|[12][0-9]{2}|3[0-5][0-9]|360)\b ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b([0-9]{1,2}|100)\b% ?\)|hsla\( ?\b([0-9]{1,2}|[12][0-9]{2}|3[0-5][0-9]|360)\b ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b([0-9]{1,2}|100)\b% ?, ?\b(1|0|0\.[0-9]{1,3}) ?\)/gi);
        selectedColors = this.usedColors(selectedColors, 12);
        this.$wrapperDiv = $(InlineEditorTemplate);
        this.colorEditor = new ColorEditor(this.$wrapperDiv, this.color, this.setColor, selectedColors);
        return this.$htmlContent.append(this.$wrapperDiv);
      };

      InlineColorEditor.prototype.close = function() {
        if (this.closed) {
          return;
        }
        this.closed = true;
        this.hostEditor.removeInlineWidget(this);
        if (this.onClose) {
          return this.onClose(this);
        }
      };

      InlineColorEditor.prototype.onAdded = function() {
        window.setTimeout(this._sizeEditorToContent.bind(this));
        return console.log(this.colorEditor.focus());
      };

      InlineColorEditor.prototype._sizeEditorToContent = function() {
        return this.hostEditor.setInlineWidgetHeight(this, this.$wrapperDiv.outerHeight(), true);
      };

      InlineColorEditor.prototype.usedColors = function(originalArray, length) {
        var a, colorCount, compressed, copyArray, copyColor, i, originalColor, _i, _j, _len, _len1;
        if (length == null) {
          length = 10;
        }
        compressed = [];
        copyArray = originalArray.slice(0);
        for (_i = 0, _len = originalArray.length; _i < _len; _i++) {
          originalColor = originalArray[_i];
          colorCount = 0;
          for (i = _j = 0, _len1 = copyArray.length; _j < _len1; i = ++_j) {
            copyColor = copyArray[i];
            if (originalColor && copyColor && originalColor.toLowerCase() === copyColor.toLowerCase()) {
              colorCount++;
              delete copyArray[i];
            }
          }
          if (colorCount > 0) {
            a = {};
            a.value = originalColor;
            a.count = colorCount;
            compressed.push(a);
          }
        }
        compressed.sort(function(a, b) {
          if (a.count === b.count) {
            return 0;
          }
          if (a.count > b.count) {
            return -1;
          }
          if (a.count < b.count) {
            return 1;
          }
        });
        return compressed.slice(0, length);
      };

      return InlineColorEditor;

    })(InlineWidget);
    return module.exports = InlineColorEditor;
  });

}).call(this);
