{
  "name": "trycatch",
  "version": "0.0.11",
  "description": "An asynchronous exception handler with long stack traces for node.js",
  "homepage": "http://github.com/CrabDude/trycatch",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrabDude/trycatch.git"
  },
  "bugs": {
    "url": "http://github.com/CrabDude/trycatch/issues"
  },
  "author": {
    "name": "Adam Crabtree",
    "email": "dude@noderiety.com",
    "url": "http://noderiety.com"
  },
  "main": "lib/trycatch",
  "directories": {
    "lib": "./lib/"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.html"
    }
  ],
  "dependencies": {
    "colors": ">=0.5.0 <0.6"
  },
  "keywords": [
    "error",
    "exception",
    "try",
    "catch",
    "stack",
    "trace"
  ],
  "readme": "trycatch\n=======\n\nAn asynchronous try catch / exception handler with long stack traces for node.js\n\nBackground\n----------\n\nSee the \"Background\" from the [long-stack-traces](https://github.com/tlrobinson/long-stack-traces) module.\n\nInstall\n-------\n\n\tnpm install trycatch\n\nBasic Example\n-------------\n\n\ttrycatch(function() {\n\t\tfunction f() {\n\t\t\tthrow new Error('foo');\n\t\t}\n\t\t\n\t\tsetTimeout(f, Math.random()*1000);\n\t\tsetTimeout(f, Math.random()*1000);\n\t}, function(err) {\n\t\tconsole.log(\"This is an asynchronous scoped error handler!\\n\", err.stack);\n\t});\n\t\n#### Output\n\n\t$ node examples/setTimeout.js \n\tThis is an asynchronous scoped error handler!\n\t Error: foo\n\t    at Object.f (/path/to/trycatch/examples/setTimeout.js:5:9)\n\t    at Timer.callback (timers.js:83:39)\n\t----------------------------------------\n\t    at setTimeout\n\t    at /path/to/trycatch/examples/setTimeout.js:8:2\n\t    at Object.<anonymous> (/path/to/trycatch/examples/setTimeout.js:3:1)\n\t    at Module._compile (module.js:404:26)\n\t    at Object..js (module.js:410:10)\n\t    at Module.load (module.js:336:31)\n\tThis is an asynchronous scoped error handler!\n\t Error: foo\n\t    at Object.f (/path/to/trycatch/examples/setTimeout.js:5:9)\n\t    at Timer.callback (timers.js:83:39)\n\t----------------------------------------\n\t    at setTimeout\n\t    at /path/to/trycatch/examples/setTimeout.js:9:2\n\t    at Object.<anonymous> (/path/to/trycatch/examples/setTimeout.js:3:1)\n\t    at Module._compile (module.js:404:26)\n\t    at Object..js (module.js:410:10)\n\t    at Module.load (module.js:336:31)\n\n\nReturning 500s on Server Request\n--------------------------------\n\n\thttp.createServer(function(req, res) {\n\t\ttrycatch(function() {\n\t\t\tsetTimeout(function() {\n\t\t\t\tthrow new Error('Baloney!');\n\t\t\t}, 1000);\n\t\t}, function(err) {\n\t\t\tres.writeHead(500);\n\t\t\tres.end(err.stack);\n\t\t});\n\t}).listen(8000);\n\nVisit http://localhost:8000 and get your 500.",
  "readmeFilename": "README.md",
  "_id": "trycatch@0.0.11",
  "dist": {
    "shasum": "1ad2fe984ff36b86136e1f117bc4ca87359d691d"
  },
  "_from": "trycatch@~ 0.0.1",
  "_resolved": "https://registry.npmjs.org/trycatch/-/trycatch-0.0.11.tgz"
}
