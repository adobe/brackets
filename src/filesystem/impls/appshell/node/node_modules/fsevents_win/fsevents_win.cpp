/*
 * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *  
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 * 
 */ 

/* This implementation based on code originally written by
 *   © 2013 by Philipp Dunkel <p.dunkel@me.com>. Licensed under MIT License
 *   https://github.com/phidelta/fsevents.git
 */

#include "fsevents_win.h"
#define WIN32_LEAN_AND_MEAN			// Exclude rarely-used stuff from Windows headers
#include <windows.h>

#pragma comment(lib, "node")		// link to node

static Persistent<FunctionTemplate> constructor_template;
static Persistent<String> emit_sym;
static Persistent<String> change_sym;

//*****************************************************************************

// node addon required function
extern "C" void init(Handle<Object> target) {
	NodeFSEvents::Initialize(target);
}

NODE_MODULE(fswatch_win, init)

//*****************************************************************************

// wraps gaining access to a given mutex
class CMutexAccess
{
public:
	CMutexAccess(HANDLE hMutex) : m_hMutex(hMutex)
		{ ::WaitForSingleObject(m_hMutex, INFINITE); }

	~CMutexAccess()
		{ ::ReleaseMutex(m_hMutex); }

private:
	HANDLE m_hMutex;
};

//*****************************************************************************

// constructor
CAsyncDirWatchInfo::sEntry::sEntry(LPWSTR lpwszFilename, int iFilenameLen, DWORD dwAction) :
m_dwAction(dwAction),
m_pPrevious(NULL),
m_pNext(NULL)
{
	m_lpwszFilename = (LPWSTR)malloc(sizeof(WCHAR) * (iFilenameLen + 1));
	if (m_lpwszFilename != NULL)
	{
		memcpy(m_lpwszFilename, lpwszFilename, sizeof(WCHAR) * iFilenameLen);
		m_lpwszFilename[iFilenameLen] = 0x00;	// null terminate
	}
}

// destructor
CAsyncDirWatchInfo::sEntry::~sEntry()
{
	free(m_lpwszFilename);
	m_lpwszFilename = NULL;
}

// constructor
CAsyncDirWatchInfo::CAsyncDirWatchInfo() :
m_pHead(NULL),
m_pTail(NULL)
{
	// mutex to synchronize access to the queue
	m_hMutex = ::CreateMutexA(NULL, FALSE, NULL);
}

// destructor
CAsyncDirWatchInfo::~CAsyncDirWatchInfo()
{
	// delete the list and its entries
	{
		CMutexAccess access(m_hMutex);
		while (m_pHead != NULL)
		{
			delete m_pHead;
			m_pHead = m_pHead->m_pNext;
		}
	}

	// cleanup
	::CloseHandle(m_hMutex);
}

// enqueue a new file notification entry
void CAsyncDirWatchInfo::Enqueue(LPENTRY lpEntry)
{
	CMutexAccess access(m_hMutex);
	if (lpEntry != NULL)
	{
		if (m_pTail == NULL && m_pHead == NULL)
		{
			// first one in list
			m_pTail = m_pHead = lpEntry;
		}
		else
		{
			// append to list
			m_pTail->m_pNext = lpEntry;
			lpEntry->m_pPrevious = m_pTail;
			m_pTail = lpEntry;
		}
	}
}

// dequeue the next file notification entry
CAsyncDirWatchInfo::LPENTRY CAsyncDirWatchInfo::Dequeue()
{
	CMutexAccess access(m_hMutex);
	LPENTRY lpEntry = NULL;
	if (m_pHead != NULL)
	{
		lpEntry = m_pHead;
		if (m_pHead->m_pNext == NULL)
		{
			// last one in list
			m_pHead = m_pTail = NULL;
		}
		else
		{
			// remove just the head
			m_pHead->m_pNext->m_pPrevious = NULL;
			m_pHead = m_pHead->m_pNext;
		}
		lpEntry->m_pNext = lpEntry->m_pPrevious = NULL;
	}
	return lpEntry;
}


//*****************************************************************************

// constructor
NodeFSEvents::NodeFSEvents(const char *lpszPath) : ObjectWrap(),
	m_pWatchInfo(NULL),
	m_lpBuffer(NULL),
	m_hAsyncDir(NULL),
	m_hIoCPort(NULL),
	m_hThread(NULL)
{
	Startup(lpszPath);
}

// destructor
NodeFSEvents::~NodeFSEvents()
{
	Shutdown();
}

// initialize a JS wrapper around this object
void NodeFSEvents::Initialize(Handle<Object> target)
{
	HandleScope scope;
	emit_sym = NODE_PSYMBOL("emit");
	change_sym = NODE_PSYMBOL("fsevent");
	Local<FunctionTemplate> t = FunctionTemplate::New(NodeFSEvents::New);
	constructor_template = Persistent<FunctionTemplate>::New(t);
	constructor_template->InstanceTemplate()->SetInternalFieldCount(1);
	constructor_template->SetClassName(String::NewSymbol("FSEvents"));
	Local<Function> constructor = constructor_template->GetFunction();

	constructor->Set(String::New("kFSEventStreamEventFlagNone"), Integer::New(0x00000000));
	constructor->Set(String::New("kFSEventStreamEventFlagMustScanSubDirs"), Integer::New(0x00000001));
	constructor->Set(String::New("kFSEventStreamEventFlagUserDropped"), Integer::New(0x00000002));
	constructor->Set(String::New("kFSEventStreamEventFlagKernelDropped"), Integer::New(0x00000004));
	constructor->Set(String::New("kFSEventStreamEventFlagEventIdsWrapped"), Integer::New(0x00000008));
	constructor->Set(String::New("kFSEventStreamEventFlagHistoryDone"), Integer::New(0x00000010));
	constructor->Set(String::New("kFSEventStreamEventFlagRootChanged"), Integer::New(0x00000020));
	constructor->Set(String::New("kFSEventStreamEventFlagMount"), Integer::New(0x00000040));
	constructor->Set(String::New("kFSEventStreamEventFlagUnmount"), Integer::New(0x00000080));
	constructor->Set(String::New("kFSEventStreamEventFlagItemCreated"), Integer::New(0x00000100));
	constructor->Set(String::New("kFSEventStreamEventFlagItemRemoved"), Integer::New(0x00000200));
	constructor->Set(String::New("kFSEventStreamEventFlagItemInodeMetaMod"), Integer::New(0x00000400));
	constructor->Set(String::New("kFSEventStreamEventFlagItemRenamed"), Integer::New(0x00000800));
	constructor->Set(String::New("kFSEventStreamEventFlagItemModified"), Integer::New(0x00001000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemFinderInfoMod"), Integer::New(0x00002000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemChangeOwner"), Integer::New(0x00004000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemXattrMod"), Integer::New(0x00008000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemIsFile"), Integer::New(0x00010000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemIsDir"), Integer::New(0x00020000));
	constructor->Set(String::New("kFSEventStreamEventFlagItemIsSymlink"), Integer::New(0x00040000));

	target->Set(String::NewSymbol("FSEvents"), constructor);
}

// unwrap the JS wrapper
Handle<Value> NodeFSEvents::Shutdown(const Arguments& args)
{
	HandleScope scope;
	NodeFSEvents *native = node::ObjectWrap::Unwrap<NodeFSEvents>(args.This());
	native->Shutdown();
	return Undefined();
}

// API to allocate a new object from JS
Handle<Value> NodeFSEvents::New(const Arguments& args)
{
	HandleScope scope;

	if (args.Length() != 1 || !args[0]->IsString()) {
		return ThrowException(String::New("Bad arguments"));
	}

	String::Utf8Value szPathName(args[0]->ToString());

	NodeFSEvents *nativeobj = new NodeFSEvents(*szPathName);
	nativeobj->Wrap(args.Holder());
	NODE_SET_METHOD(args.Holder(), "stop", NodeFSEvents::Shutdown);
	return args.This();
}

// starts up the file watching thread
void NodeFSEvents::Startup(const char *lpszPath)
{
	BOOL bResult = FALSE;

	// validate path input
	int ilen = 0; 
	if ((lpszPath != NULL)
		&& (lpszPath[0] != 0x00)
		&& ((ilen = ::MultiByteToWideChar(CP_UTF8, 0, lpszPath, -1, NULL, 0)) <= MAXPATH))
	{
		::MultiByteToWideChar(CP_UTF8, 0, lpszPath, -1, m_wszPathName, MAXPATH+1);

		// allocate buffer to hold asynchronous watch info
		m_pWatchInfo = new CAsyncDirWatchInfo();
		if (m_pWatchInfo != NULL)
		{
			// allocate buffer to hold directory change information
			m_lpBuffer = (PFILE_NOTIFY_INFORMATION)malloc(READ_DIRECTORY_CHANGES_BUFSIZE);
			if (m_lpBuffer != NULL)
			{
				// open the directory to watch
				m_hAsyncDir = CreateFileW(
					m_wszPathName,
					FILE_LIST_DIRECTORY,
					FILE_SHARE_READ | FILE_SHARE_WRITE,
					NULL,
					OPEN_EXISTING,
					FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OVERLAPPED,
					NULL);
				if (m_hAsyncDir != INVALID_HANDLE_VALUE)
				{
					// set up communication channels between watcher and our thread
					m_hIoCPort = ::CreateIoCompletionPort(
						m_hAsyncDir,
						m_hIoCPort,
						(ULONG_PTR)m_pWatchInfo,
						0);
					if (m_hIoCPort != NULL)
					{
						memset(&m_Overlapped, 0, sizeof(m_Overlapped));

						// set up communication between our file watching thread and a callback to post changes back to JS
						uv_async_init(uv_default_loop(), &m_uvaWatcher, NodeFSEvents::Callback);
						m_uvaWatcher.data = this;

						// start the thread
						DWORD dwThreadId = 0;
						m_hThread = ::CreateThread(NULL, 0, &NodeFSEvents::Run, this, 0, &dwThreadId);

						bResult = m_hThread != NULL;
					}
				}
			}
		}
	}

	// if something failed, then shutdown and cleanup
	if (!bResult)
		Shutdown();
}

// cleanly shuts down the file watching thread
void NodeFSEvents::Shutdown()
{
	// shutdown the thread, if it's running
	if (m_hThread != NULL)
	{
		::PostQueuedCompletionStatus(m_hIoCPort, 0, 0, NULL);   // tell the thread to quit
		::WaitForSingleObject(m_hThread, INFINITE);			 // wait for the thread to quit
		uv_close((uv_handle_t*) &m_uvaWatcher, NULL);
		m_hThread = NULL;
	}

	// cleanup
	if (m_hIoCPort != NULL)
	{
		::CloseHandle(m_hIoCPort);
		m_hIoCPort = NULL;
	}
	if (m_hAsyncDir != NULL)
	{
		::CloseHandle(m_hAsyncDir);
		m_hAsyncDir = NULL;
	}
	if (m_lpBuffer != NULL)
	{
		::free(m_lpBuffer);
		m_lpBuffer = NULL;
	}
	if (m_pWatchInfo != NULL)
	{
		delete m_pWatchInfo;
		m_pWatchInfo = NULL;
	}
}

// threadproc used to maintain the file watcher and any file changes it finds
DWORD WINAPI NodeFSEvents::Run(LPVOID lpData)
{
	NodeFSEvents *This = (NodeFSEvents*)lpData;
	if (This != NULL)
	{
		BOOL bContinue = TRUE;
		while (bContinue)
		{
			// set the watcher
			DWORD dwBytesReturned = (DWORD)0;
			bContinue = ::ReadDirectoryChangesW(This->m_hAsyncDir, This->m_lpBuffer, READ_DIRECTORY_CHANGES_BUFSIZE, TRUE, 
				FILE_NOTIFY_CHANGE_FILE_NAME | FILE_NOTIFY_CHANGE_DIR_NAME | FILE_NOTIFY_CHANGE_ATTRIBUTES | FILE_NOTIFY_CHANGE_SIZE
				| FILE_NOTIFY_CHANGE_LAST_WRITE | FILE_NOTIFY_CHANGE_LAST_ACCESS | FILE_NOTIFY_CHANGE_CREATION | FILE_NOTIFY_CHANGE_SECURITY,
				&dwBytesReturned, &(This->m_Overlapped), NULL);

			if (bContinue)
			{
				// wait for a signal
				DWORD dwNumBytes;
				LPOVERLAPPED lpOverlapped = NULL;
				ULONG_PTR lpCompletionKey = NULL; 
				::GetQueuedCompletionStatus(This->m_hIoCPort, &dwNumBytes, &lpCompletionKey, &lpOverlapped, INFINITE);
				if (dwNumBytes > 0)
				{
					// process the watched directory change
					PFILE_NOTIFY_INFORMATION pfni = This->m_lpBuffer;
					while (pfni != NULL)
					{
						CAsyncDirWatchInfo::LPENTRY entry = new CAsyncDirWatchInfo::sEntry(
							pfni->FileName,
							pfni->FileNameLength / sizeof(WCHAR),
							pfni->Action);
						if (entry != NULL)
						{
							This->m_pWatchInfo->Enqueue(entry);

							uv_async_send(&(This->m_uvaWatcher));
						}

						pfni = (pfni->NextEntryOffset > 0) ? (PFILE_NOTIFY_INFORMATION)(((BYTE*)pfni) + pfni->NextEntryOffset) : NULL;
					}
				}
				else
				{
					// signaled from Shutdown() to end this thread
					bContinue = FALSE;
				}
			}
		}
	}

	return TRUE;
}

// callback signaled from file watching threadproc that allows us to asynchronously post changes back to JS
void NodeFSEvents::Callback(uv_async_t *handle, int status)
{
	NodeFSEvents *This = static_cast<NodeFSEvents*>(handle->data);
	HandleScope scope;

	// initialize wrapper to call back into JS
	Local<Value> callback_v = This->handle_->Get(emit_sym);
	Local<Function> callback = Local<Function>::Cast(callback_v);
	Handle<Value> args[3];
	args[0] = change_sym;

	// iterate thru each queued file watching entry
	CAsyncDirWatchInfo::LPENTRY entry = NULL;
	while ((entry = This->m_pWatchInfo->Dequeue()) != NULL)
	{
		// concatenate the root search path and the file notification path
		WCHAR szwFullPath[MAXPATH+1] = {0};
		wcscpy(szwFullPath, This->m_wszPathName);
		wcscat(szwFullPath, entry->m_lpwszFilename);

		// normalize path separators from '\' to '/'
		WCHAR *pwch;
		while ((pwch = wcspbrk(szwFullPath, (WCHAR*)"\\")) != NULL)
			*pwch = '/';

		// confirm that the utf8-converted path still fits within MAXPATH (to avoid buffer overrun)
		if (::WideCharToMultiByte(CP_UTF8, 0, szwFullPath, -1, NULL, 0, NULL, NULL) <= MAXPATH)
		{
			// convert the full pathname to utf8
			char szFullPath[MAXPATH+1] = {0};
			::WideCharToMultiByte(CP_UTF8, 0, szwFullPath, -1, szFullPath, MAXPATH + 1, NULL, NULL);

			// map the FILE_NOTIFY_INFORMATION 'Action' to a node fs-event.c 'enum uv_fs_event' type
			int iAction;
			switch(entry->m_dwAction)
			{
			case FILE_ACTION_ADDED:
			case FILE_ACTION_REMOVED:
			case FILE_ACTION_RENAMED_OLD_NAME:
			case FILE_ACTION_RENAMED_NEW_NAME:
				iAction = UV_RENAME;
				break;
			case FILE_ACTION_MODIFIED:
			default:
				iAction = UV_CHANGE;
			}

			// call back into JS with each change.
			args[1] = String::New(szFullPath);
			args[2] = Integer::New(iAction);
			callback->Call(This->handle_, 3, args);
		}
		delete entry;
	}
}