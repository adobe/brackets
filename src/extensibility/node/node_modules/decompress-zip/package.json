{
  "name": "decompress-zip",
  "version": "0.0.2",
  "description": "A library for reading data from zip files",
  "main": "lib/decompress-zip.js",
  "scripts": {
    "test": "grunt test"
  },
  "bin": {
    "decompress-zip": "bin/decompress-zip"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bower/decompress-zip.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "keywords": [
    "zip",
    "unzip",
    "tar",
    "untar",
    "compress",
    "decompress",
    "archive",
    "extract",
    "zlib"
  ],
  "author": {
    "name": "The Bower authors"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bower/bower/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/bower/decompress-zip/issues"
  },
  "devDependencies": {
    "grunt-exec": "~0.4.2",
    "chai": "~1.7.2",
    "grunt-contrib-jshint": "~0.6.2",
    "grunt-contrib-watch": "~0.5.1",
    "grunt": "~0.4.1",
    "istanbul": "~0.1.43",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "~1.12.0",
    "glob": "~3.2.6",
    "tmp": "0.0.21",
    "request": "~2.27.0"
  },
  "dependencies": {
    "q": "~0.9.6",
    "mkpath": "~0.1.0",
    "binary": "~0.3.0",
    "touch": "0.0.2",
    "readable-stream": "~1.1.8",
    "nopt": "~2.1.2"
  },
  "readme": "# decompress-zip [![Build Status](https://secure.travis-ci.org/bower/decompress-zip.png?branch=master)](http://travis-ci.org/bower/decompress-zip)\n\nExtract files from a ZIP archive\n\n## Usage\n\n### .extract(options)\n\nExtracts the contents of the ZIP archive `file`.\n\nReturns an EventEmitter with two possible events - `error` on an error, and `extract` when the extraction has completed. The value passed to the `extract` event is a basic log of each file and how it was compressed.\n\nThe default value for `options` is `{ path: '.' }`. Currently `path` is the\nonly option, and is the output path for the extraction.\n\n```js\nvar DecompressZip = require('decompress-zip');\nvar unzipper = new DecompressZip(filename)\n\nunzipper.on('error', function (err) {\n    console.log('Caught an error');\n});\n\nunzipper.on('extract', function (log) {\n    console.log('Finished extracting');\n});\n\nunzipper.extract({\n\tpath: 'some/path'\n});\n```\n\nIf `path` does not exist, decompress-zip will attempt to create it first.\n\n### .list()\n\nMuch like extract, except:\n- the success event is `list`\n- the data for the event is an array of paths\n- no files are actually extracted\n- there are no options\n\n```js\nvar DecompressZip = require('decompress-zip');\nvar unzipper = new DecompressZip(filename)\n\nunzipper.on('error', function (err) {\n    console.log('Caught an error');\n});\n\nunzipper.on('list', function (files) {\n    console.log('The archive contains:');\n    console.log(files);\n});\n\nunzipper.list();\n```\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n",
  "readmeFilename": "README.md",
  "_id": "decompress-zip@0.0.2",
  "_from": "decompress-zip@0.0.2"
}
